
ledrot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003020  08003020  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003020  08003020  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003020  08003020  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  08003034  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003034  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf3  00000000  00000000  0002cbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002f340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019446  00000000  00000000  0002fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c3a  00000000  00000000  000491fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091920  00000000  00000000  00052e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000e47d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fd8 	.word	0x08002fd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fd8 	.word	0x08002fd8

080001c8 <serial1.7847>:

 *modeA &= ~(0x3);


 void serial1()
 {
 80001c8:	b4b0      	push	{r4, r5, r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4663      	mov	r3, ip
 80001d0:	f8c7 c004 	str.w	ip, [r7, #4]
	 loop=0;
 80001d4:	f04f 0100 	mov.w	r1, #0
 80001d8:	f04f 0200 	mov.w	r2, #0
 80001dc:	e9c3 1200 	strd	r1, r2, [r3]
	  while(!(*inA & 0x1) && loop<100)
 80001e0:	e04f      	b.n	8000282 <serial1.7847+0xba>
		 	  {

		   	  			  	*modeE &= ~(3<<(i));
 80001e2:	699a      	ldr	r2, [r3, #24]
 80001e4:	6812      	ldr	r2, [r2, #0]
 80001e6:	6959      	ldr	r1, [r3, #20]
 80001e8:	2003      	movs	r0, #3
 80001ea:	fa00 f101 	lsl.w	r1, r0, r1
 80001ee:	43c9      	mvns	r1, r1
 80001f0:	4011      	ands	r1, r2
 80001f2:	699a      	ldr	r2, [r3, #24]
 80001f4:	6011      	str	r1, [r2, #0]
		   	  			  	*modeE |= (1<<(i));
 80001f6:	699a      	ldr	r2, [r3, #24]
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	6959      	ldr	r1, [r3, #20]
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f101 	lsl.w	r1, r0, r1
 8000202:	4311      	orrs	r1, r2
 8000204:	699a      	ldr	r2, [r3, #24]
 8000206:	6011      	str	r1, [r2, #0]
		   	  			  	*outE |= (1<<k);
 8000208:	691a      	ldr	r2, [r3, #16]
 800020a:	6812      	ldr	r2, [r2, #0]
 800020c:	68d9      	ldr	r1, [r3, #12]
 800020e:	2001      	movs	r0, #1
 8000210:	fa00 f101 	lsl.w	r1, r0, r1
 8000214:	4311      	orrs	r1, r2
 8000216:	691a      	ldr	r2, [r3, #16]
 8000218:	6011      	str	r1, [r2, #0]
		   	  		for(uint64_t j=0;j<300000;j++);
 800021a:	f04f 0100 	mov.w	r1, #0
 800021e:	f04f 0200 	mov.w	r2, #0
 8000222:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8000226:	e006      	b.n	8000236 <serial1.7847+0x6e>
 8000228:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800022c:	1c4c      	adds	r4, r1, #1
 800022e:	f142 0500 	adc.w	r5, r2, #0
 8000232:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8000236:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800023a:	4c1e      	ldr	r4, [pc, #120]	; (80002b4 <serial1.7847+0xec>)
 800023c:	f04f 0500 	mov.w	r5, #0
 8000240:	4295      	cmp	r5, r2
 8000242:	bf08      	it	eq
 8000244:	428c      	cmpeq	r4, r1
 8000246:	d2ef      	bcs.n	8000228 <serial1.7847+0x60>
		   	  		*outE ^= (1<<k);
 8000248:	691a      	ldr	r2, [r3, #16]
 800024a:	6812      	ldr	r2, [r2, #0]
 800024c:	68d9      	ldr	r1, [r3, #12]
 800024e:	2001      	movs	r0, #1
 8000250:	fa00 f101 	lsl.w	r1, r0, r1
 8000254:	4051      	eors	r1, r2
 8000256:	691a      	ldr	r2, [r3, #16]
 8000258:	6011      	str	r1, [r2, #0]
		   	  		i+=2;
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	3202      	adds	r2, #2
 800025e:	615a      	str	r2, [r3, #20]
		   	  		k++;
 8000260:	68da      	ldr	r2, [r3, #12]
 8000262:	3201      	adds	r2, #1
 8000264:	60da      	str	r2, [r3, #12]

		   	  		if(i>31)
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	2a1f      	cmp	r2, #31
 800026a:	d903      	bls.n	8000274 <serial1.7847+0xac>
		   	  		{
		   	  			i=16;
 800026c:	2210      	movs	r2, #16
 800026e:	615a      	str	r2, [r3, #20]
		   	  			k=8;
 8000270:	2208      	movs	r2, #8
 8000272:	60da      	str	r2, [r3, #12]
		   	  		}
		   	  		loop++;
 8000274:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000278:	1c61      	adds	r1, r4, #1
 800027a:	f145 0200 	adc.w	r2, r5, #0
 800027e:	e9c3 1200 	strd	r1, r2, [r3]
	  while(!(*inA & 0x1) && loop<100)
 8000282:	689a      	ldr	r2, [r3, #8]
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	f002 0201 	and.w	r2, r2, #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d105      	bne.n	800029a <serial1.7847+0xd2>
 800028e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000292:	2a00      	cmp	r2, #0
 8000294:	bf08      	it	eq
 8000296:	2964      	cmpeq	r1, #100	; 0x64
 8000298:	d3a3      	bcc.n	80001e2 <serial1.7847+0x1a>
		 	  }
	  i=16;
 800029a:	2210      	movs	r2, #16
 800029c:	615a      	str	r2, [r3, #20]
	  k=8;
 800029e:	2208      	movs	r2, #8
 80002a0:	60da      	str	r2, [r3, #12]
	  change++;
 80002a2:	7f1a      	ldrb	r2, [r3, #28]
 80002a4:	3201      	adds	r2, #1
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	771a      	strb	r2, [r3, #28]
 }
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bcb0      	pop	{r4, r5, r7}
 80002b2:	4770      	bx	lr
 80002b4:	000493df 	.word	0x000493df

080002b8 <main>:
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b099      	sub	sp, #100	; 0x64
 80002bc:	af00      	add	r7, sp, #0
int main(void)
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	623b      	str	r3, [r7, #32]
  HAL_Init();
 80002c4:	f000 fe1a 	bl	8000efc <HAL_Init>
  SystemClock_Config();
 80002c8:	f000 fb3c 	bl	8000944 <SystemClock_Config>
  MX_GPIO_Init();
 80002cc:	f000 fc3c 	bl	8000b48 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002d0:	f000 fb9a 	bl	8000a08 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002d4:	f000 fbd8 	bl	8000a88 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002d8:	f000 fc14 	bl	8000b04 <MX_USB_PCD_Init>
  uint32_t *clk= (uint32_t*)(0x40021014);
 80002dc:	4b64      	ldr	r3, [pc, #400]	; (8000470 <main+0x1b8>)
 80002de:	62fb      	str	r3, [r7, #44]	; 0x2c
 uint32_t *modeE= (uint32_t*)0x48001000;
 80002e0:	4b64      	ldr	r3, [pc, #400]	; (8000474 <main+0x1bc>)
 80002e2:	61bb      	str	r3, [r7, #24]
  uint32_t *modeA= (uint32_t*)0x48000000;
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t *inA= (uint32_t*)(0x48000010);
 80002ea:	4b63      	ldr	r3, [pc, #396]	; (8000478 <main+0x1c0>)
 80002ec:	60bb      	str	r3, [r7, #8]
  uint32_t *outE= (uint32_t*)(0x48001014);
 80002ee:	4b63      	ldr	r3, [pc, #396]	; (800047c <main+0x1c4>)
 80002f0:	613b      	str	r3, [r7, #16]
	uint32_t i=16,k=8;
 80002f2:	2310      	movs	r3, #16
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	2308      	movs	r3, #8
 80002f8:	60fb      	str	r3, [r7, #12]
	uint8_t change=0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	773b      	strb	r3, [r7, #28]
  *clk &= 0x0;
 80002fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 *clk |= (1<<21);
 8000304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800030c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800030e:	601a      	str	r2, [r3, #0]
 *clk |=(1<<17);
 8000310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800031a:	601a      	str	r2, [r3, #0]
 *modeA &= ~(0x3);
 800031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f023 0203 	bic.w	r2, r3, #3
 8000324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000326:	601a      	str	r2, [r3, #0]
  while (1)
  {
	    /* USER CODE END WHILE */


	serial1();
 8000328:	463b      	mov	r3, r7
 800032a:	469c      	mov	ip, r3
 800032c:	f7ff ff4c 	bl	80001c8 <serial1.7847>
	for(uint64_t j=0;j<1000000;j++);
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	f04f 0400 	mov.w	r4, #0
 8000338:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 800033c:	e006      	b.n	800034c <main+0x94>
 800033e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8000342:	1c59      	adds	r1, r3, #1
 8000344:	f144 0200 	adc.w	r2, r4, #0
 8000348:	e9c7 1216 	strd	r1, r2, [r7, #88]	; 0x58
 800034c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8000350:	494b      	ldr	r1, [pc, #300]	; (8000480 <main+0x1c8>)
 8000352:	f04f 0200 	mov.w	r2, #0
 8000356:	42a2      	cmp	r2, r4
 8000358:	bf08      	it	eq
 800035a:	4299      	cmpeq	r1, r3
 800035c:	d2ef      	bcs.n	800033e <main+0x86>
	serial2();
 800035e:	463b      	mov	r3, r7
 8000360:	469c      	mov	ip, r3
 8000362:	f000 f88f 	bl	8000484 <serial2.7856>
	for(uint64_t j=0;j<1000000;j++);
 8000366:	f04f 0300 	mov.w	r3, #0
 800036a:	f04f 0400 	mov.w	r4, #0
 800036e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8000372:	e006      	b.n	8000382 <main+0xca>
 8000374:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000378:	1c59      	adds	r1, r3, #1
 800037a:	f144 0200 	adc.w	r2, r4, #0
 800037e:	e9c7 1214 	strd	r1, r2, [r7, #80]	; 0x50
 8000382:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000386:	493e      	ldr	r1, [pc, #248]	; (8000480 <main+0x1c8>)
 8000388:	f04f 0200 	mov.w	r2, #0
 800038c:	42a2      	cmp	r2, r4
 800038e:	bf08      	it	eq
 8000390:	4299      	cmpeq	r1, r3
 8000392:	d2ef      	bcs.n	8000374 <main+0xbc>
	serial3();
 8000394:	463b      	mov	r3, r7
 8000396:	469c      	mov	ip, r3
 8000398:	f000 f8e8 	bl	800056c <serial3.7865>
	for(uint64_t j=0;j<1000000;j++);
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	f04f 0400 	mov.w	r4, #0
 80003a4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80003a8:	e006      	b.n	80003b8 <main+0x100>
 80003aa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80003ae:	1c59      	adds	r1, r3, #1
 80003b0:	f144 0200 	adc.w	r2, r4, #0
 80003b4:	e9c7 1212 	strd	r1, r2, [r7, #72]	; 0x48
 80003b8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80003bc:	4930      	ldr	r1, [pc, #192]	; (8000480 <main+0x1c8>)
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	bf08      	it	eq
 80003c6:	4299      	cmpeq	r1, r3
 80003c8:	d2ef      	bcs.n	80003aa <main+0xf2>
	serial4();
 80003ca:	463b      	mov	r3, r7
 80003cc:	469c      	mov	ip, r3
 80003ce:	f000 f945 	bl	800065c <serial4.7874>
	for(uint64_t j=0;j<1000000;j++);
 80003d2:	f04f 0300 	mov.w	r3, #0
 80003d6:	f04f 0400 	mov.w	r4, #0
 80003da:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80003de:	e006      	b.n	80003ee <main+0x136>
 80003e0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80003e4:	1c59      	adds	r1, r3, #1
 80003e6:	f144 0200 	adc.w	r2, r4, #0
 80003ea:	e9c7 1210 	strd	r1, r2, [r7, #64]	; 0x40
 80003ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80003f2:	4923      	ldr	r1, [pc, #140]	; (8000480 <main+0x1c8>)
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	42a2      	cmp	r2, r4
 80003fa:	bf08      	it	eq
 80003fc:	4299      	cmpeq	r1, r3
 80003fe:	d2ef      	bcs.n	80003e0 <main+0x128>
	serial5();
 8000400:	463b      	mov	r3, r7
 8000402:	469c      	mov	ip, r3
 8000404:	f000 f9a2 	bl	800074c <serial5.7883>
	for(uint64_t j=0;j<1000000;j++);
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	f04f 0400 	mov.w	r4, #0
 8000410:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8000414:	e006      	b.n	8000424 <main+0x16c>
 8000416:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800041a:	1c59      	adds	r1, r3, #1
 800041c:	f144 0200 	adc.w	r2, r4, #0
 8000420:	e9c7 120e 	strd	r1, r2, [r7, #56]	; 0x38
 8000424:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000428:	4915      	ldr	r1, [pc, #84]	; (8000480 <main+0x1c8>)
 800042a:	f04f 0200 	mov.w	r2, #0
 800042e:	42a2      	cmp	r2, r4
 8000430:	bf08      	it	eq
 8000432:	4299      	cmpeq	r1, r3
 8000434:	d2ef      	bcs.n	8000416 <main+0x15e>
	serial6();
 8000436:	463b      	mov	r3, r7
 8000438:	469c      	mov	ip, r3
 800043a:	f000 f9ff 	bl	800083c <serial6.7892>
	for(uint64_t j=0;j<1000000;j++);
 800043e:	f04f 0300 	mov.w	r3, #0
 8000442:	f04f 0400 	mov.w	r4, #0
 8000446:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800044a:	e006      	b.n	800045a <main+0x1a2>
 800044c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000450:	1c59      	adds	r1, r3, #1
 8000452:	f144 0200 	adc.w	r2, r4, #0
 8000456:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
 800045a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800045e:	4908      	ldr	r1, [pc, #32]	; (8000480 <main+0x1c8>)
 8000460:	f04f 0200 	mov.w	r2, #0
 8000464:	42a2      	cmp	r2, r4
 8000466:	bf08      	it	eq
 8000468:	4299      	cmpeq	r1, r3
 800046a:	d2ef      	bcs.n	800044c <main+0x194>
	serial1();
 800046c:	e75c      	b.n	8000328 <main+0x70>
 800046e:	bf00      	nop
 8000470:	40021014 	.word	0x40021014
 8000474:	48001000 	.word	0x48001000
 8000478:	48000010 	.word	0x48000010
 800047c:	48001014 	.word	0x48001014
 8000480:	000f423f 	.word	0x000f423f

08000484 <serial2.7856>:
 {
 8000484:	b4b0      	push	{r4, r5, r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4663      	mov	r3, ip
 800048c:	f8c7 c004 	str.w	ip, [r7, #4]
	 loop=0;
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	f04f 0200 	mov.w	r2, #0
 8000498:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 800049c:	e04a      	b.n	8000534 <serial2.7856+0xb0>
	   	  			  	*modeE &= ~(3<<(i));
 800049e:	699a      	ldr	r2, [r3, #24]
 80004a0:	6812      	ldr	r2, [r2, #0]
 80004a2:	6959      	ldr	r1, [r3, #20]
 80004a4:	2003      	movs	r0, #3
 80004a6:	fa00 f101 	lsl.w	r1, r0, r1
 80004aa:	43c9      	mvns	r1, r1
 80004ac:	4011      	ands	r1, r2
 80004ae:	699a      	ldr	r2, [r3, #24]
 80004b0:	6011      	str	r1, [r2, #0]
	   	  			  	*modeE |= (1<<(i));
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	6959      	ldr	r1, [r3, #20]
 80004b8:	2001      	movs	r0, #1
 80004ba:	fa00 f101 	lsl.w	r1, r0, r1
 80004be:	4311      	orrs	r1, r2
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	6011      	str	r1, [r2, #0]
	   	  			  	*outE |= (1<<k);
 80004c4:	691a      	ldr	r2, [r3, #16]
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	68d9      	ldr	r1, [r3, #12]
 80004ca:	2001      	movs	r0, #1
 80004cc:	fa00 f101 	lsl.w	r1, r0, r1
 80004d0:	4311      	orrs	r1, r2
 80004d2:	691a      	ldr	r2, [r3, #16]
 80004d4:	6011      	str	r1, [r2, #0]
	   	  		for(uint64_t j=0;j<500000;j++);
 80004d6:	f04f 0100 	mov.w	r1, #0
 80004da:	f04f 0200 	mov.w	r2, #0
 80004de:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80004e2:	e006      	b.n	80004f2 <serial2.7856+0x6e>
 80004e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80004e8:	1c4c      	adds	r4, r1, #1
 80004ea:	f142 0500 	adc.w	r5, r2, #0
 80004ee:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80004f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80004f6:	4c1c      	ldr	r4, [pc, #112]	; (8000568 <serial2.7856+0xe4>)
 80004f8:	f04f 0500 	mov.w	r5, #0
 80004fc:	4295      	cmp	r5, r2
 80004fe:	bf08      	it	eq
 8000500:	428c      	cmpeq	r4, r1
 8000502:	d2ef      	bcs.n	80004e4 <serial2.7856+0x60>
	   	  		*outE ^= (1<<k);
 8000504:	691a      	ldr	r2, [r3, #16]
 8000506:	6812      	ldr	r2, [r2, #0]
 8000508:	68d9      	ldr	r1, [r3, #12]
 800050a:	2001      	movs	r0, #1
 800050c:	fa00 f101 	lsl.w	r1, r0, r1
 8000510:	4051      	eors	r1, r2
 8000512:	691a      	ldr	r2, [r3, #16]
 8000514:	6011      	str	r1, [r2, #0]
	   	  		k^=(1<<2);
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	f082 0204 	eor.w	r2, r2, #4
 800051c:	60da      	str	r2, [r3, #12]
	   	  		i^=(1<<3);
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	f082 0208 	eor.w	r2, r2, #8
 8000524:	615a      	str	r2, [r3, #20]
	   	  		loop++;
 8000526:	e9d3 4500 	ldrd	r4, r5, [r3]
 800052a:	1c61      	adds	r1, r4, #1
 800052c:	f145 0200 	adc.w	r2, r5, #0
 8000530:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 8000534:	689a      	ldr	r2, [r3, #8]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	f002 0201 	and.w	r2, r2, #1
 800053c:	2a00      	cmp	r2, #0
 800053e:	d105      	bne.n	800054c <serial2.7856+0xc8>
 8000540:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000544:	2a00      	cmp	r2, #0
 8000546:	bf08      	it	eq
 8000548:	2964      	cmpeq	r1, #100	; 0x64
 800054a:	d3a8      	bcc.n	800049e <serial2.7856+0x1a>
	  i=16;
 800054c:	2210      	movs	r2, #16
 800054e:	615a      	str	r2, [r3, #20]
	  k=8;
 8000550:	2208      	movs	r2, #8
 8000552:	60da      	str	r2, [r3, #12]
	  change++;
 8000554:	7f1a      	ldrb	r2, [r3, #28]
 8000556:	3201      	adds	r2, #1
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	771a      	strb	r2, [r3, #28]
 }
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bcb0      	pop	{r4, r5, r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	0007a11f 	.word	0x0007a11f

0800056c <serial3.7865>:
 {
 800056c:	b4b0      	push	{r4, r5, r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4663      	mov	r3, ip
 8000574:	f8c7 c004 	str.w	ip, [r7, #4]
	 k=9;
 8000578:	2209      	movs	r2, #9
 800057a:	60da      	str	r2, [r3, #12]
	 i=18;
 800057c:	2212      	movs	r2, #18
 800057e:	615a      	str	r2, [r3, #20]
	 loop=0;
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	f04f 0200 	mov.w	r2, #0
 8000588:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 800058c:	e04a      	b.n	8000624 <serial3.7865+0xb8>
	   	  			  	*modeE &= ~(3<<(i));
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	6959      	ldr	r1, [r3, #20]
 8000594:	2003      	movs	r0, #3
 8000596:	fa00 f101 	lsl.w	r1, r0, r1
 800059a:	43c9      	mvns	r1, r1
 800059c:	4011      	ands	r1, r2
 800059e:	699a      	ldr	r2, [r3, #24]
 80005a0:	6011      	str	r1, [r2, #0]
	   	  			  	*modeE |= (1<<(i));
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	6959      	ldr	r1, [r3, #20]
 80005a8:	2001      	movs	r0, #1
 80005aa:	fa00 f101 	lsl.w	r1, r0, r1
 80005ae:	4311      	orrs	r1, r2
 80005b0:	699a      	ldr	r2, [r3, #24]
 80005b2:	6011      	str	r1, [r2, #0]
	   	  			  	*outE |= (1<<k);
 80005b4:	691a      	ldr	r2, [r3, #16]
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	68d9      	ldr	r1, [r3, #12]
 80005ba:	2001      	movs	r0, #1
 80005bc:	fa00 f101 	lsl.w	r1, r0, r1
 80005c0:	4311      	orrs	r1, r2
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	6011      	str	r1, [r2, #0]
	   	  		for(uint64_t j=0;j<500000;j++);
 80005c6:	f04f 0100 	mov.w	r1, #0
 80005ca:	f04f 0200 	mov.w	r2, #0
 80005ce:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80005d2:	e006      	b.n	80005e2 <serial3.7865+0x76>
 80005d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80005d8:	1c4c      	adds	r4, r1, #1
 80005da:	f142 0500 	adc.w	r5, r2, #0
 80005de:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80005e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80005e6:	4c1c      	ldr	r4, [pc, #112]	; (8000658 <serial3.7865+0xec>)
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	4295      	cmp	r5, r2
 80005ee:	bf08      	it	eq
 80005f0:	428c      	cmpeq	r4, r1
 80005f2:	d2ef      	bcs.n	80005d4 <serial3.7865+0x68>
	   	  		*outE ^= (1<<k);
 80005f4:	691a      	ldr	r2, [r3, #16]
 80005f6:	6812      	ldr	r2, [r2, #0]
 80005f8:	68d9      	ldr	r1, [r3, #12]
 80005fa:	2001      	movs	r0, #1
 80005fc:	fa00 f101 	lsl.w	r1, r0, r1
 8000600:	4051      	eors	r1, r2
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	6011      	str	r1, [r2, #0]
	   	  		k^=(1<<2);
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	f082 0204 	eor.w	r2, r2, #4
 800060c:	60da      	str	r2, [r3, #12]
	   	  		i^=(1<<3);
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	f082 0208 	eor.w	r2, r2, #8
 8000614:	615a      	str	r2, [r3, #20]
	   	  		loop++;
 8000616:	e9d3 4500 	ldrd	r4, r5, [r3]
 800061a:	1c61      	adds	r1, r4, #1
 800061c:	f145 0200 	adc.w	r2, r5, #0
 8000620:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	f002 0201 	and.w	r2, r2, #1
 800062c:	2a00      	cmp	r2, #0
 800062e:	d105      	bne.n	800063c <serial3.7865+0xd0>
 8000630:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000634:	2a00      	cmp	r2, #0
 8000636:	bf08      	it	eq
 8000638:	2964      	cmpeq	r1, #100	; 0x64
 800063a:	d3a8      	bcc.n	800058e <serial3.7865+0x22>
	  i=16;
 800063c:	2210      	movs	r2, #16
 800063e:	615a      	str	r2, [r3, #20]
	  k=8;
 8000640:	2208      	movs	r2, #8
 8000642:	60da      	str	r2, [r3, #12]
	  change++;
 8000644:	7f1a      	ldrb	r2, [r3, #28]
 8000646:	3201      	adds	r2, #1
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	771a      	strb	r2, [r3, #28]
 }
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bcb0      	pop	{r4, r5, r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	0007a11f 	.word	0x0007a11f

0800065c <serial4.7874>:
 {
 800065c:	b4b0      	push	{r4, r5, r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4663      	mov	r3, ip
 8000664:	f8c7 c004 	str.w	ip, [r7, #4]
	 k=10;
 8000668:	220a      	movs	r2, #10
 800066a:	60da      	str	r2, [r3, #12]
	 i=20;
 800066c:	2214      	movs	r2, #20
 800066e:	615a      	str	r2, [r3, #20]
	 loop=0;
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 800067c:	e04a      	b.n	8000714 <serial4.7874+0xb8>
	   	  			  	*modeE &= ~(3<<(i));
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	6959      	ldr	r1, [r3, #20]
 8000684:	2003      	movs	r0, #3
 8000686:	fa00 f101 	lsl.w	r1, r0, r1
 800068a:	43c9      	mvns	r1, r1
 800068c:	4011      	ands	r1, r2
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	6011      	str	r1, [r2, #0]
	   	  			  	*modeE |= (1<<(i));
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	6959      	ldr	r1, [r3, #20]
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f101 	lsl.w	r1, r0, r1
 800069e:	4311      	orrs	r1, r2
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	6011      	str	r1, [r2, #0]
	   	  			  	*outE |= (1<<k);
 80006a4:	691a      	ldr	r2, [r3, #16]
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	68d9      	ldr	r1, [r3, #12]
 80006aa:	2001      	movs	r0, #1
 80006ac:	fa00 f101 	lsl.w	r1, r0, r1
 80006b0:	4311      	orrs	r1, r2
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	6011      	str	r1, [r2, #0]
	   	  		for(uint64_t j=0;j<500000;j++);
 80006b6:	f04f 0100 	mov.w	r1, #0
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80006c2:	e006      	b.n	80006d2 <serial4.7874+0x76>
 80006c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006c8:	1c4c      	adds	r4, r1, #1
 80006ca:	f142 0500 	adc.w	r5, r2, #0
 80006ce:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80006d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006d6:	4c1c      	ldr	r4, [pc, #112]	; (8000748 <serial4.7874+0xec>)
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	4295      	cmp	r5, r2
 80006de:	bf08      	it	eq
 80006e0:	428c      	cmpeq	r4, r1
 80006e2:	d2ef      	bcs.n	80006c4 <serial4.7874+0x68>
	   	  		*outE ^= (1<<k);
 80006e4:	691a      	ldr	r2, [r3, #16]
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	68d9      	ldr	r1, [r3, #12]
 80006ea:	2001      	movs	r0, #1
 80006ec:	fa00 f101 	lsl.w	r1, r0, r1
 80006f0:	4051      	eors	r1, r2
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	6011      	str	r1, [r2, #0]
	   	  		k^=(1<<2);
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	f082 0204 	eor.w	r2, r2, #4
 80006fc:	60da      	str	r2, [r3, #12]
	   	  		i^=(1<<3);
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	f082 0208 	eor.w	r2, r2, #8
 8000704:	615a      	str	r2, [r3, #20]
	   	  		loop++;
 8000706:	e9d3 4500 	ldrd	r4, r5, [r3]
 800070a:	1c61      	adds	r1, r4, #1
 800070c:	f145 0200 	adc.w	r2, r5, #0
 8000710:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<100)
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	f002 0201 	and.w	r2, r2, #1
 800071c:	2a00      	cmp	r2, #0
 800071e:	d105      	bne.n	800072c <serial4.7874+0xd0>
 8000720:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000724:	2a00      	cmp	r2, #0
 8000726:	bf08      	it	eq
 8000728:	2964      	cmpeq	r1, #100	; 0x64
 800072a:	d3a8      	bcc.n	800067e <serial4.7874+0x22>
	  i=16;
 800072c:	2210      	movs	r2, #16
 800072e:	615a      	str	r2, [r3, #20]
	  k=8;
 8000730:	2208      	movs	r2, #8
 8000732:	60da      	str	r2, [r3, #12]
	  change++;
 8000734:	7f1a      	ldrb	r2, [r3, #28]
 8000736:	3201      	adds	r2, #1
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	771a      	strb	r2, [r3, #28]
 }
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bcb0      	pop	{r4, r5, r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	0007a11f 	.word	0x0007a11f

0800074c <serial5.7883>:
 {
 800074c:	b4b0      	push	{r4, r5, r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4663      	mov	r3, ip
 8000754:	f8c7 c004 	str.w	ip, [r7, #4]
	 k=11;
 8000758:	220b      	movs	r2, #11
 800075a:	60da      	str	r2, [r3, #12]
	 i=22;
 800075c:	2216      	movs	r2, #22
 800075e:	615a      	str	r2, [r3, #20]
	 loop=0;
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1)&& loop<100)
 800076c:	e04a      	b.n	8000804 <serial5.7883+0xb8>
	   	  			  	*modeE &= ~(3<<(i));
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	6959      	ldr	r1, [r3, #20]
 8000774:	2003      	movs	r0, #3
 8000776:	fa00 f101 	lsl.w	r1, r0, r1
 800077a:	43c9      	mvns	r1, r1
 800077c:	4011      	ands	r1, r2
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	6011      	str	r1, [r2, #0]
	   	  			  	*modeE |= (1<<(i));
 8000782:	699a      	ldr	r2, [r3, #24]
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	6959      	ldr	r1, [r3, #20]
 8000788:	2001      	movs	r0, #1
 800078a:	fa00 f101 	lsl.w	r1, r0, r1
 800078e:	4311      	orrs	r1, r2
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	6011      	str	r1, [r2, #0]
	   	  			  	*outE |= (1<<k);
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	68d9      	ldr	r1, [r3, #12]
 800079a:	2001      	movs	r0, #1
 800079c:	fa00 f101 	lsl.w	r1, r0, r1
 80007a0:	4311      	orrs	r1, r2
 80007a2:	691a      	ldr	r2, [r3, #16]
 80007a4:	6011      	str	r1, [r2, #0]
	   	  		for(uint64_t j=0;j<500000;j++);
 80007a6:	f04f 0100 	mov.w	r1, #0
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80007b2:	e006      	b.n	80007c2 <serial5.7883+0x76>
 80007b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80007b8:	1c4c      	adds	r4, r1, #1
 80007ba:	f142 0500 	adc.w	r5, r2, #0
 80007be:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80007c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80007c6:	4c1c      	ldr	r4, [pc, #112]	; (8000838 <serial5.7883+0xec>)
 80007c8:	f04f 0500 	mov.w	r5, #0
 80007cc:	4295      	cmp	r5, r2
 80007ce:	bf08      	it	eq
 80007d0:	428c      	cmpeq	r4, r1
 80007d2:	d2ef      	bcs.n	80007b4 <serial5.7883+0x68>
	   	  		*outE ^= (1<<k);
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	68d9      	ldr	r1, [r3, #12]
 80007da:	2001      	movs	r0, #1
 80007dc:	fa00 f101 	lsl.w	r1, r0, r1
 80007e0:	4051      	eors	r1, r2
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	6011      	str	r1, [r2, #0]
	   	  		k^=(1<<2);
 80007e6:	68da      	ldr	r2, [r3, #12]
 80007e8:	f082 0204 	eor.w	r2, r2, #4
 80007ec:	60da      	str	r2, [r3, #12]
	   	  		i^=(1<<3);
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	f082 0208 	eor.w	r2, r2, #8
 80007f4:	615a      	str	r2, [r3, #20]
	   	  		loop++;
 80007f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80007fa:	1c61      	adds	r1, r4, #1
 80007fc:	f145 0200 	adc.w	r2, r5, #0
 8000800:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1)&& loop<100)
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	f002 0201 	and.w	r2, r2, #1
 800080c:	2a00      	cmp	r2, #0
 800080e:	d105      	bne.n	800081c <serial5.7883+0xd0>
 8000810:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000814:	2a00      	cmp	r2, #0
 8000816:	bf08      	it	eq
 8000818:	2964      	cmpeq	r1, #100	; 0x64
 800081a:	d3a8      	bcc.n	800076e <serial5.7883+0x22>
	  i=16;
 800081c:	2210      	movs	r2, #16
 800081e:	615a      	str	r2, [r3, #20]
	  k=8;
 8000820:	2208      	movs	r2, #8
 8000822:	60da      	str	r2, [r3, #12]
	  change++;
 8000824:	7f1a      	ldrb	r2, [r3, #28]
 8000826:	3201      	adds	r2, #1
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	771a      	strb	r2, [r3, #28]
 }
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bcb0      	pop	{r4, r5, r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	0007a11f 	.word	0x0007a11f

0800083c <serial6.7892>:
 {
 800083c:	b4b0      	push	{r4, r5, r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	4663      	mov	r3, ip
 8000844:	f8c7 c004 	str.w	ip, [r7, #4]
	 loop=0;
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<50)
 8000854:	e05b      	b.n	800090e <serial6.7892+0xd2>
	   	  			  	*modeE &= ~(0xFFFF<<(i));
 8000856:	699a      	ldr	r2, [r3, #24]
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	6959      	ldr	r1, [r3, #20]
 800085c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000860:	fa00 f101 	lsl.w	r1, r0, r1
 8000864:	43c9      	mvns	r1, r1
 8000866:	4011      	ands	r1, r2
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	6011      	str	r1, [r2, #0]
	   	  			  	*modeE |= (0x5555<<(i));
 800086c:	699a      	ldr	r2, [r3, #24]
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	6959      	ldr	r1, [r3, #20]
 8000872:	f245 5055 	movw	r0, #21845	; 0x5555
 8000876:	fa00 f101 	lsl.w	r1, r0, r1
 800087a:	4311      	orrs	r1, r2
 800087c:	699a      	ldr	r2, [r3, #24]
 800087e:	6011      	str	r1, [r2, #0]
	   	  			  	*outE |= (0xFF<<k);
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	68d9      	ldr	r1, [r3, #12]
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	fa00 f101 	lsl.w	r1, r0, r1
 800088c:	4311      	orrs	r1, r2
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	6011      	str	r1, [r2, #0]
	   	  		for(uint64_t j=0;j<500000;j++);
 8000892:	f04f 0100 	mov.w	r1, #0
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	e9c7 1204 	strd	r1, r2, [r7, #16]
 800089e:	e006      	b.n	80008ae <serial6.7892+0x72>
 80008a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80008a4:	1c4c      	adds	r4, r1, #1
 80008a6:	f142 0500 	adc.w	r5, r2, #0
 80008aa:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80008ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80008b2:	4c23      	ldr	r4, [pc, #140]	; (8000940 <serial6.7892+0x104>)
 80008b4:	f04f 0500 	mov.w	r5, #0
 80008b8:	4295      	cmp	r5, r2
 80008ba:	bf08      	it	eq
 80008bc:	428c      	cmpeq	r4, r1
 80008be:	d2ef      	bcs.n	80008a0 <serial6.7892+0x64>
	   	  		*outE ^= (0xFF<<k);
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	68d9      	ldr	r1, [r3, #12]
 80008c6:	20ff      	movs	r0, #255	; 0xff
 80008c8:	fa00 f101 	lsl.w	r1, r0, r1
 80008cc:	4051      	eors	r1, r2
 80008ce:	691a      	ldr	r2, [r3, #16]
 80008d0:	6011      	str	r1, [r2, #0]
	   	  	for(uint64_t j=0;j<500000;j++);
 80008d2:	f04f 0100 	mov.w	r1, #0
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80008de:	e006      	b.n	80008ee <serial6.7892+0xb2>
 80008e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80008e4:	1c4c      	adds	r4, r1, #1
 80008e6:	f142 0500 	adc.w	r5, r2, #0
 80008ea:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80008ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80008f2:	4c13      	ldr	r4, [pc, #76]	; (8000940 <serial6.7892+0x104>)
 80008f4:	f04f 0500 	mov.w	r5, #0
 80008f8:	4295      	cmp	r5, r2
 80008fa:	bf08      	it	eq
 80008fc:	428c      	cmpeq	r4, r1
 80008fe:	d2ef      	bcs.n	80008e0 <serial6.7892+0xa4>
   	  		loop++;
 8000900:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000904:	1c61      	adds	r1, r4, #1
 8000906:	f145 0200 	adc.w	r2, r5, #0
 800090a:	e9c3 1200 	strd	r1, r2, [r3]
	 while(!(*inA & 0x1) && loop<50)
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	f002 0201 	and.w	r2, r2, #1
 8000916:	2a00      	cmp	r2, #0
 8000918:	d105      	bne.n	8000926 <serial6.7892+0xea>
 800091a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800091e:	2a00      	cmp	r2, #0
 8000920:	bf08      	it	eq
 8000922:	2932      	cmpeq	r1, #50	; 0x32
 8000924:	d397      	bcc.n	8000856 <serial6.7892+0x1a>
	  i=16;
 8000926:	2210      	movs	r2, #16
 8000928:	615a      	str	r2, [r3, #20]
	  k=8;
 800092a:	2208      	movs	r2, #8
 800092c:	60da      	str	r2, [r3, #12]
	  change++;
 800092e:	7f1a      	ldrb	r2, [r3, #28]
 8000930:	3201      	adds	r2, #1
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	771a      	strb	r2, [r3, #28]
 }
 8000936:	bf00      	nop
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	bcb0      	pop	{r4, r5, r7}
 800093e:	4770      	bx	lr
 8000940:	0007a11f 	.word	0x0007a11f

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09e      	sub	sp, #120	; 0x78
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800094e:	2228      	movs	r2, #40	; 0x28
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fb38 	bl	8002fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	223c      	movs	r2, #60	; 0x3c
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fb2a 	bl	8002fc8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000974:	2303      	movs	r3, #3
 8000976:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000978:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000982:	2301      	movs	r3, #1
 8000984:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000986:	2310      	movs	r3, #16
 8000988:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000994:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000998:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 ff64 	bl	800186c <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f943 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fe56 	bl	800267c <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d6:	f000 f92d 	bl	8000c34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SystemClock_Config+0xc0>)
 80009dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f82c 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009f6:	f000 f91d 	bl	8000c34 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3778      	adds	r7, #120	; 0x78
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	00020020 	.word	0x00020020

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_I2C1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a44:	f000 fd38 	bl	80014b8 <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 f8f1 	bl	8000c34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a56:	f000 fdbe 	bl	80015d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f8e8 	bl	8000c34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a68:	f000 fe00 	bl	800166c <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 f8df 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000028 	.word	0x20000028
 8000a80:	40005400 	.word	0x40005400
 8000a84:	2000090e 	.word	0x2000090e

08000a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_SPI1_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_SPI1_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_SPI1_Init+0x74>)
 8000a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI1_Init+0x74>)
 8000aa2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI1_Init+0x74>)
 8000abe:	2208      	movs	r2, #8
 8000ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_SPI1_Init+0x74>)
 8000ae8:	f002 f95e 	bl	8002da8 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 f89f 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000074 	.word	0x20000074
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MX_USB_PCD_Init+0x40>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_USB_PCD_Init+0x3c>)
 8000b2e:	f000 fde9 	bl	8001704 <HAL_PCD_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000b38:	f000 f87c 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000d8 	.word	0x200000d8
 8000b44:	40005c00 	.word	0x40005c00

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_GPIO_Init+0xe0>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_GPIO_Init+0xe4>)
 8000bde:	f000 fc53 	bl	8001488 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8000be2:	2337      	movs	r3, #55	; 0x37
 8000be4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xe8>)
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_GPIO_Init+0xe4>)
 8000bf6:	f000 facd 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000bfa:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000bfe:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_GPIO_Init+0xe4>)
 8000c14:	f000 fabe 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]


}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48001000 	.word	0x48001000
 8000c30:	10120000 	.word	0x10120000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x44>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x44>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x44>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_I2C_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d127      	bne.n	8000cfe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cca:	2312      	movs	r3, #18
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_I2C_MspInit+0x84>)
 8000ce2:	f000 fa57 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_SPI_MspInit+0x7c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d128      	bne.n	8000d88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_SPI_MspInit+0x80>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d66:	23e0      	movs	r3, #224	; 0xe0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d76:	2305      	movs	r3, #5
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f000 fa06 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013000 	.word	0x40013000
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_PCD_MspInit+0x80>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d129      	bne.n	8000e0e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000de4:	230e      	movs	r3, #14
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 f9cf 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_PCD_MspInit+0x84>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f888 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x28>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x28>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SystemInit+0x28>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed2:	f7ff ffd3 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f853 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff f9ed 	bl	80002b8 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000ee4:	08003028 	.word	0x08003028
	ldr	r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eec:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ef4:	20000348 	.word	0x20000348

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x28>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f90d 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe94 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f917 	bl	800117a <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f8ed 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000344 	.word	0x20000344

08000fb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000344 	.word	0x20000344

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5c 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e154      	b.n	800144e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8146 	beq.w	8001448 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x38>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b12      	cmp	r3, #18
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	6939      	ldr	r1, [r7, #16]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00b      	beq.n	8001268 <HAL_GPIO_Init+0xd4>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125c:	2b11      	cmp	r3, #17
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80a0 	beq.w	8001448 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001308:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_GPIO_Init+0x2d8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_GPIO_Init+0x2d8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b55      	ldr	r3, [pc, #340]	; (800146c <HAL_GPIO_Init+0x2d8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001320:	4a53      	ldr	r2, [pc, #332]	; (8001470 <HAL_GPIO_Init+0x2dc>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134a:	d019      	beq.n	8001380 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a49      	ldr	r2, [pc, #292]	; (8001474 <HAL_GPIO_Init+0x2e0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_GPIO_Init+0x2e4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a47      	ldr	r2, [pc, #284]	; (800147c <HAL_GPIO_Init+0x2e8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1e0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a46      	ldr	r2, [pc, #280]	; (8001480 <HAL_GPIO_Init+0x2ec>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1dc>
 800136c:	2304      	movs	r3, #4
 800136e:	e008      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001370:	2305      	movs	r3, #5
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001374:	2303      	movs	r3, #3
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001378:	2302      	movs	r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001380:	2300      	movs	r3, #0
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001392:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_GPIO_Init+0x2dc>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c4:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ee:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f aea3 	bne.w	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48001000 	.word	0x48001000
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e081      	b.n	80015ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fbd4 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2224      	movs	r2, #36	; 0x24
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e006      	b.n	8001540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800153e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d104      	bne.n	8001552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	ea42 0103 	orr.w	r1, r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	021a      	lsls	r2, r3, #8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69d9      	ldr	r1, [r3, #28]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d138      	bne.n	800165e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e032      	b.n	8001660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2224      	movs	r2, #36	; 0x24
 8001606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001628:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b20      	cmp	r3, #32
 8001680:	d139      	bne.n	80016f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800168c:	2302      	movs	r3, #2
 800168e:	e033      	b.n	80016f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
  }
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af06      	add	r7, sp, #24
 800170a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0a6      	b.n	8001864 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fb34 	bl	8000d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fbdd 	bl	8002efc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e035      	b.n	80017b4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	015b      	lsls	r3, r3, #5
 800174e:	4413      	add	r3, r2
 8001750:	3329      	adds	r3, #41	; 0x29
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	4413      	add	r3, r2
 800175e:	3328      	adds	r3, #40	; 0x28
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	b291      	uxth	r1, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	015b      	lsls	r3, r3, #5
 800176e:	4413      	add	r3, r2
 8001770:	3336      	adds	r3, #54	; 0x36
 8001772:	460a      	mov	r2, r1
 8001774:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	015b      	lsls	r3, r3, #5
 800177c:	4413      	add	r3, r2
 800177e:	332b      	adds	r3, #43	; 0x2b
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	015b      	lsls	r3, r3, #5
 800178a:	4413      	add	r3, r2
 800178c:	3338      	adds	r3, #56	; 0x38
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	4413      	add	r3, r2
 800179a:	333c      	adds	r3, #60	; 0x3c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	3302      	adds	r3, #2
 80017a6:	015b      	lsls	r3, r3, #5
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	3301      	adds	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3c4      	bcc.n	8001748 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e031      	b.n	8001828 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
 80017cc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	4413      	add	r3, r2
 80017dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4413      	add	r3, r2
 800180c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	330a      	adds	r3, #10
 800181a:	015b      	lsls	r3, r3, #5
 800181c:	4413      	add	r3, r2
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	3301      	adds	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3c8      	bcc.n	80017c4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	687e      	ldr	r6, [r7, #4]
 800183a:	466d      	mov	r5, sp
 800183c:	f106 0410 	add.w	r4, r6, #16
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	602b      	str	r3, [r5, #0]
 8001848:	1d33      	adds	r3, r6, #4
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f001 fb72 	bl	8002f36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800186c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001872:	af00      	add	r7, sp, #0
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	f000 bef4 	b.w	800266e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 816a 	beq.w	8001b6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001896:	4bb3      	ldr	r3, [pc, #716]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d00c      	beq.n	80018bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a2:	4bb0      	ldr	r3, [pc, #704]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d159      	bne.n	8001962 <HAL_RCC_OscConfig+0xf6>
 80018ae:	4bad      	ldr	r3, [pc, #692]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d152      	bne.n	8001962 <HAL_RCC_OscConfig+0xf6>
 80018bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x82>
 80018e8:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0xae>
 80018ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001906:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800190a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001916:	4b93      	ldr	r3, [pc, #588]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001922:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800192e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 810c 	beq.w	8001b68 <HAL_RCC_OscConfig+0x2fc>
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8106 	bne.w	8001b68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	f000 be86 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x110>
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7c      	ldr	r2, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e030      	b.n	80019de <HAL_RCC_OscConfig+0x172>
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x134>
 8001986:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a73      	ldr	r2, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01e      	b.n	80019de <HAL_RCC_OscConfig+0x172>
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x15a>
 80019ac:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a6c      	ldr	r2, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x172>
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	495d      	ldr	r1, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d059      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fad8 	bl	8000fb0 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a06:	f7ff fad3 	bl	8000fb0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d902      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f000 be29 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1e2>
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x20e>
 8001a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a52:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a66:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a6a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a7e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a8e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a92:	fab2 f282 	clz	r2, r2
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f002 021f 	and.w	r2, r2, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ab      	beq.n	8001a06 <HAL_RCC_OscConfig+0x19a>
 8001aae:	e05c      	b.n	8001b6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fa7e 	bl	8000fb0 <HAL_GetTick>
 8001ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aba:	f7ff fa79 	bl	8000fb0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d902      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f000 bdcf 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
 8001ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ae4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0x296>
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x2c2>
 8001b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b1e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x2f8>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b42:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ab      	bne.n	8001aba <HAL_RCC_OscConfig+0x24e>
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_OscConfig+0x2fe>
 8001b64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 816f 	beq.w	8001e58 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b7a:	4bd0      	ldr	r3, [pc, #832]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b86:	4bcd      	ldr	r3, [pc, #820]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d16c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x400>
 8001b92:	4bca      	ldr	r3, [pc, #808]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d166      	bne.n	8001c6c <HAL_RCC_OscConfig+0x400>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0x362>
 8001bc8:	4bbc      	ldr	r3, [pc, #752]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0x38a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001be6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bf2:	4bb2      	ldr	r3, [pc, #712]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001bfc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c00:	fa92 f2a2 	rbit	r2, r2
 8001c04:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c08:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_OscConfig+0x3cc>
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f000 bd1b 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4ba0      	ldr	r3, [pc, #640]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	21f8      	movs	r1, #248	; 0xf8
 8001c48:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c50:	fa91 f1a1 	rbit	r1, r1
 8001c54:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c58:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c5c:	fab1 f181 	clz	r1, r1
 8001c60:	b2c9      	uxtb	r1, r1
 8001c62:	408b      	lsls	r3, r1
 8001c64:	4995      	ldr	r1, [pc, #596]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e0f5      	b.n	8001e58 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8085 	beq.w	8001d82 <HAL_RCC_OscConfig+0x516>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f984 	bl	8000fb0 <HAL_GetTick>
 8001ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff f97f 	bl	8000fb0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d902      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f000 bcd5 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x488>
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e013      	b.n	8001d1c <HAL_RCC_OscConfig+0x4b0>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d26:	fa92 f2a2 	rbit	r2, r2
 8001d2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f042 0220 	orr.w	r2, r2, #32
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0af      	beq.n	8001cae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	21f8      	movs	r1, #248	; 0xf8
 8001d5e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d66:	fa91 f1a1 	rbit	r1, r1
 8001d6a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d6e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d72:	fab1 f181 	clz	r1, r1
 8001d76:	b2c9      	uxtb	r1, r1
 8001d78:	408b      	lsls	r3, r1
 8001d7a:	4950      	ldr	r1, [pc, #320]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e06a      	b.n	8001e58 <HAL_RCC_OscConfig+0x5ec>
 8001d82:	2301      	movs	r3, #1
 8001d84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2300      	movs	r3, #0
 8001dac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff f8ff 	bl	8000fb0 <HAL_GetTick>
 8001db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff f8fa 	bl	8000fb0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d902      	bls.n	8001dce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f000 bc50 	b.w	800266e <HAL_RCC_OscConfig+0xe02>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_OscConfig+0x592>
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e013      	b.n	8001e26 <HAL_RCC_OscConfig+0x5ba>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_OscConfig+0x650>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2202      	movs	r2, #2
 8001e28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1af      	bne.n	8001db8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80da 	beq.w	800201c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d069      	beq.n	8001f46 <HAL_RCC_OscConfig+0x6da>
 8001e72:	2301      	movs	r3, #1
 8001e74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x654>)
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	461a      	mov	r2, r3
 8001e98:	2301      	movs	r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f888 	bl	8000fb0 <HAL_GetTick>
 8001ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea4:	e00e      	b.n	8001ec4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f883 	bl	8000fb0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d906      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e3d9      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	10908120 	.word	0x10908120
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ed6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001eda:	2202      	movs	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4ba5      	ldr	r3, [pc, #660]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f0e:	2102      	movs	r1, #2
 8001f10:	6019      	str	r1, [r3, #0]
 8001f12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f1a3 	rbit	r1, r3
 8001f1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f20:	6019      	str	r1, [r3, #0]
  return result;
 8001f22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0b0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x63a>
 8001f44:	e06a      	b.n	800201c <HAL_RCC_OscConfig+0x7b0>
 8001f46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f5c:	601a      	str	r2, [r3, #0]
  return result;
 8001f5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x934>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7ff f81a 	bl	8000fb0 <HAL_GetTick>
 8001f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f82:	f7ff f815 	bl	8000fb0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e36b      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 8001f96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fca:	2202      	movs	r2, #2
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	6019      	str	r1, [r3, #0]
 8001fea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f1a3 	rbit	r1, r3
 8001ff4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ff8:	6019      	str	r1, [r3, #0]
  return result;
 8001ffa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1b2      	bne.n	8001f82 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8158 	beq.w	80022dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a56      	ldr	r2, [pc, #344]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b54      	ldr	r3, [pc, #336]	; (800219c <HAL_RCC_OscConfig+0x930>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x938>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11a      	bne.n	80020a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x938>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x938>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207c:	f7fe ff98 	bl	8000fb0 <HAL_GetTick>
 8002080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e009      	b.n	800209a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe ff93 	bl	8000fb0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e2e9      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x938>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ef      	beq.n	8002086 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x852>
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a39      	ldr	r2, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e02f      	b.n	800211e <HAL_RCC_OscConfig+0x8b2>
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x876>
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a33      	ldr	r2, [pc, #204]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a30      	ldr	r2, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e01d      	b.n	800211e <HAL_RCC_OscConfig+0x8b2>
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x89a>
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x930>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x8b2>
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_RCC_OscConfig+0x930>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d06b      	beq.n	8002200 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe ff42 	bl	8000fb0 <HAL_GetTick>
 800212c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe ff3d 	bl	8000fb0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e291      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 800214a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800217e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_OscConfig+0x93c>
 8002194:	4b01      	ldr	r3, [pc, #4]	; (800219c <HAL_RCC_OscConfig+0x930>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x958>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	10908120 	.word	0x10908120
 80021a4:	40007000 	.word	0x40007000
 80021a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	4bbb      	ldr	r3, [pc, #748]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021c8:	2102      	movs	r1, #2
 80021ca:	6011      	str	r1, [r2, #0]
 80021cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	fa92 f1a2 	rbit	r1, r2
 80021d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021da:	6011      	str	r1, [r2, #0]
  return result;
 80021dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f002 021f 	and.w	r2, r2, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d099      	beq.n	8002132 <HAL_RCC_OscConfig+0x8c6>
 80021fe:	e063      	b.n	80022c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fed6 	bl	8000fb0 <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fed1 	bl	8000fb0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e225      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 8002222:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002226:	2202      	movs	r2, #2
 8002228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800223e:	2202      	movs	r2, #2
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002250:	601a      	str	r2, [r3, #0]
  return result;
 8002252:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002256:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0xa06>
 800226c:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	e00d      	b.n	800228e <HAL_RCC_OscConfig+0xa22>
 8002272:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002292:	2102      	movs	r1, #2
 8002294:	6011      	str	r1, [r2, #0]
 8002296:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	fa92 f1a2 	rbit	r1, r2
 80022a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022a4:	6011      	str	r1, [r2, #0]
  return result;
 80022a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1a0      	bne.n	800220a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4a76      	ldr	r2, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 81c2 	beq.w	800266c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	f000 819c 	beq.w	800262e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 8114 	bne.w	800252a <HAL_RCC_OscConfig+0xcbe>
 8002302:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800231a:	601a      	str	r2, [r3, #0]
  return result;
 800231c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002320:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fe3a 	bl	8000fb0 <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e009      	b.n	8002356 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fe35 	bl	8000fb0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e18b      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 8002356:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800235a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800236e:	601a      	str	r2, [r3, #0]
  return result;
 8002370:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0xb24>
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e01b      	b.n	80023c8 <HAL_RCC_OscConfig+0xb5c>
 8002390:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	fa92 f1a2 	rbit	r1, r2
 80023dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023e0:	6011      	str	r1, [r2, #0]
  return result;
 80023e2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d19e      	bne.n	8002342 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	430b      	orrs	r3, r1
 800241a:	4925      	ldr	r1, [pc, #148]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002438:	601a      	str	r2, [r3, #0]
  return result;
 800243a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800243e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	461a      	mov	r2, r3
 8002452:	2301      	movs	r3, #1
 8002454:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fdab 	bl	8000fb0 <HAL_GetTick>
 800245a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245e:	e009      	b.n	8002474 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fda6 	bl	8000fb0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0fc      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 8002474:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800248c:	601a      	str	r2, [r3, #0]
  return result;
 800248e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002492:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0xc48>
 80024a8:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <HAL_RCC_OscConfig+0xc44>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	e01e      	b.n	80024ec <HAL_RCC_OscConfig+0xc80>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0xe0c>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f4:	6011      	str	r1, [r2, #0]
 80024f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	fa92 f1a2 	rbit	r1, r2
 8002500:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002504:	6011      	str	r1, [r2, #0]
  return result;
 8002506:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d09b      	beq.n	8002460 <HAL_RCC_OscConfig+0xbf4>
 8002528:	e0a0      	b.n	800266c <HAL_RCC_OscConfig+0xe00>
 800252a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800252e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002542:	601a      	str	r2, [r3, #0]
  return result;
 8002544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002548:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	461a      	mov	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fd26 	bl	8000fb0 <HAL_GetTick>
 8002564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	e009      	b.n	800257e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe fd21 	bl	8000fb0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e077      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
 800257e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	601a      	str	r2, [r3, #0]
  return result;
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_OscConfig+0xd4c>
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_OscConfig+0xe0c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e01b      	b.n	80025f0 <HAL_RCC_OscConfig+0xd84>
 80025b8:	f107 0320 	add.w	r3, r7, #32
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f107 0318 	add.w	r3, r7, #24
 80025d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_RCC_OscConfig+0xe0c>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f107 0210 	add.w	r2, r7, #16
 80025f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f8:	6011      	str	r1, [r2, #0]
 80025fa:	f107 0210 	add.w	r2, r7, #16
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	fa92 f1a2 	rbit	r1, r2
 8002604:	f107 020c 	add.w	r2, r7, #12
 8002608:	6011      	str	r1, [r2, #0]
  return result;
 800260a:	f107 020c 	add.w	r2, r7, #12
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d19e      	bne.n	800256a <HAL_RCC_OscConfig+0xcfe>
 800262c:	e01e      	b.n	800266c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_RCC_OscConfig+0xe0c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002644:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	429a      	cmp	r2, r3
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800265a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b09e      	sub	sp, #120	; 0x78
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e162      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	498b      	ldr	r1, [pc, #556]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e14a      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b82      	ldr	r3, [pc, #520]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	497f      	ldr	r1, [pc, #508]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80dc 	beq.w	80028a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d13c      	bne.n	8002772 <HAL_RCC_ClockConfig+0xf6>
 80026f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_ClockConfig+0xa6>
 800271c:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e00f      	b.n	8002742 <HAL_RCC_ClockConfig+0xc6>
 8002722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	667b      	str	r3, [r7, #100]	; 0x64
 8002730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
 8002736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800273e:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002746:	65ba      	str	r2, [r7, #88]	; 0x58
 8002748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800274a:	fa92 f2a2 	rbit	r2, r2
 800274e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d17b      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0f3      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d13c      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x178>
 800277a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x128>
 800279e:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x148>
 80027a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
 80027b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
 80027b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80027ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d13a      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b2      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
 80027f4:	2302      	movs	r3, #2
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_RCC_ClockConfig+0x1a0>
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e00d      	b.n	8002838 <HAL_RCC_ClockConfig+0x1bc>
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	2302      	movs	r3, #2
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2202      	movs	r2, #2
 800283a:	61ba      	str	r2, [r7, #24]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	617a      	str	r2, [r7, #20]
  return result;
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	fab2 f282 	clz	r2, r2
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	f042 0220 	orr.w	r2, r2, #32
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f002 021f 	and.w	r2, r2, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f202 	lsl.w	r2, r1, r2
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e079      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	491a      	ldr	r1, [pc, #104]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb9a 	bl	8000fb0 <HAL_GetTick>
 800287c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fb96 	bl	8000fb0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e061      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_ClockConfig+0x260>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d214      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4906      	ldr	r1, [pc, #24]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <HAL_RCC_ClockConfig+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e040      	b.n	800295a <HAL_RCC_ClockConfig+0x2de>
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_ClockConfig+0x2e8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	491a      	ldr	r1, [pc, #104]	; (8002964 <HAL_RCC_ClockConfig+0x2e8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_RCC_ClockConfig+0x2e8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4912      	ldr	r1, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x2e8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800291e:	f000 f829 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_RCC_ClockConfig+0x2e8>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	22f0      	movs	r2, #240	; 0xf0
 800292e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	fa92 f2a2 	rbit	r2, r2
 8002936:	60fa      	str	r2, [r7, #12]
  return result;
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	fab2 f282 	clz	r2, r2
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	40d3      	lsrs	r3, r2
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x2ec>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	fa21 f303 	lsr.w	r3, r1, r3
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_RCC_ClockConfig+0x2f0>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCC_ClockConfig+0x2f4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fae8 	bl	8000f28 <HAL_InitTick>
  
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3778      	adds	r7, #120	; 0x78
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	08002ff0 	.word	0x08002ff0
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d002      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x30>
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x36>
 80029a2:	e03c      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a4:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029a6:	623b      	str	r3, [r7, #32]
      break;
 80029a8:	e03c      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	607a      	str	r2, [r7, #4]
  return result;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	40d3      	lsrs	r3, r2
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	220f      	movs	r2, #15
 80029d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	60fa      	str	r2, [r7, #12]
  return result;
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e004      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	e002      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a20:	623b      	str	r3, [r7, #32]
      break;
 8002a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	372c      	adds	r7, #44	; 0x2c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	08003000 	.word	0x08003000
 8002a40:	08003010 	.word	0x08003010
 8002a44:	003d0900 	.word	0x003d0900

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b092      	sub	sp, #72	; 0x48
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80d7 	beq.w	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b45      	ldr	r3, [pc, #276]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a41      	ldr	r2, [pc, #260]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fa7f 	bl	8000fb0 <HAL_GetTick>
 8002ab2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fa7b 	bl	8000fb0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e169      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8084 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d07c      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2301      	movs	r3, #1
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04b      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fa2b 	bl	8000fb0 <HAL_GetTick>
 8002b5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fa27 	bl	8000fb0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e113      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ba2:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	e00d      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	10908100 	.word	0x10908100
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	613a      	str	r2, [r7, #16]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	fa92 f2a2 	rbit	r2, r2
 8002bce:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0b7      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c20:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	495d      	ldr	r1, [pc, #372]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3e:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4956      	ldr	r1, [pc, #344]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5c:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	494e      	ldr	r1, [pc, #312]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f023 0210 	bic.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4947      	ldr	r1, [pc, #284]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	493f      	ldr	r1, [pc, #252]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f023 0220 	bic.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4938      	ldr	r1, [pc, #224]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd4:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	4930      	ldr	r1, [pc, #192]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4929      	ldr	r1, [pc, #164]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4921      	ldr	r1, [pc, #132]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	491a      	ldr	r1, [pc, #104]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	4912      	ldr	r1, [pc, #72]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	490b      	ldr	r1, [pc, #44]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3748      	adds	r7, #72	; 0x48
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000

08002da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e084      	b.n	8002ec4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd ff9d 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dfa:	d902      	bls.n	8002e02 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e002      	b.n	8002e08 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e10:	d007      	beq.n	8002e22 <HAL_SPI_Init+0x7a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e32:	d903      	bls.n	8002e3c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3a:	e002      	b.n	8002e42 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	ea42 0103 	orr.w	r1, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0204 	and.w	r2, r3, #4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	ea42 0103 	orr.w	r1, r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ed4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ed8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f04:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f08:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b21a      	sxth	r2, r3
 8002f14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	b21b      	sxth	r3, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f36:	b084      	sub	sp, #16
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	f107 0014 	add.w	r0, r7, #20
 8002f44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ffaf 	bl	8002ecc <USB_EnableGlobalInt>

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f7a:	b004      	add	sp, #16
 8002f7c:	4770      	bx	lr
	...

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0d      	ldr	r6, [pc, #52]	; (8002fb8 <__libc_init_array+0x38>)
 8002f84:	4c0d      	ldr	r4, [pc, #52]	; (8002fbc <__libc_init_array+0x3c>)
 8002f86:	1ba4      	subs	r4, r4, r6
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	2500      	movs	r5, #0
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	4e0b      	ldr	r6, [pc, #44]	; (8002fc0 <__libc_init_array+0x40>)
 8002f92:	4c0c      	ldr	r4, [pc, #48]	; (8002fc4 <__libc_init_array+0x44>)
 8002f94:	f000 f820 	bl	8002fd8 <_init>
 8002f98:	1ba4      	subs	r4, r4, r6
 8002f9a:	10a4      	asrs	r4, r4, #2
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	42a5      	cmp	r5, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fa8:	4798      	blx	r3
 8002faa:	3501      	adds	r5, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fb2:	4798      	blx	r3
 8002fb4:	3501      	adds	r5, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08003020 	.word	0x08003020
 8002fbc:	08003020 	.word	0x08003020
 8002fc0:	08003020 	.word	0x08003020
 8002fc4:	08003024 	.word	0x08003024

08002fc8 <memset>:
 8002fc8:	4402      	add	r2, r0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <memset+0xa>
 8002fd0:	4770      	bx	lr
 8002fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd6:	e7f9      	b.n	8002fcc <memset+0x4>

08002fd8 <_init>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	bf00      	nop
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr

08002fe4 <_fini>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	bf00      	nop
 8002fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fea:	bc08      	pop	{r3}
 8002fec:	469e      	mov	lr, r3
 8002fee:	4770      	bx	lr
